<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<unit xmlns="http://www.srcML.org/srcML/src" revision="0.9.5" language="Java" filename="ConsoleApplet.java">
<comment type="block">/*  The ConsoleApplet provides a basis for writing applets that simulate
    line-oriented console-type input/output.  The class ConsoleCanvas is
    used to provide the I/O routines; these routines type output into
    the ConsoleCanvas and read input typed there by the user.  See the
    files CanvasPanel.java and ConsoleCanvas.java for information.

    A console applet is set up to run one particular program.  The applet
    includes a button that the user presses to run the program (or to
    abort it when it is running).  It also includes a label, which by default
    is "Java I/O Console".  The default program, defined in this file,
    is a simple Hello World program.

    To write a new console applet, with a more interesting program, you
    should create a subclass of ConsoleApplet.  The subclass should
    override the method  program() , which represents the program to
    be run.  The program should use the instance variable, console, to
    do input/output.  For example, console.putln("HelloWorld.")
    or N=console.getInt().  All the public methods of class ConsolePanel
    can be called in the program.

    (Of course, you could also just modify this file, instead of
    writing a subclass.)

    David Eck
    Department of Mathematics and Computer Science
    Hobart and William Smith Colleges
    Geneva, NY 14456
    eck@hws.edu

    July 17, 1998: Program was modified to be compliant with Java 1.1.
    December 9, 1997:  This is a modification of a version written
    on August 2, 1996.  (Subclasses of previous versions of the old applet
    should still work with this new version.)

*/</comment>



<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>*</name></name>;</import>
<import>import <name><name>java</name><operator>.</operator><name>awt</name><operator>.</operator><name>event</name><operator>.</operator><name>*</name></name>;</import>

<class><specifier>public</specifier> class <name>ConsoleApplet</name> <super><extends>extends <name><name>java</name><operator>.</operator><name>applet</name><operator>.</operator><name>Applet</name></name></extends>
                           <implements>implements <name>Runnable</name>, <name>ActionListener</name></implements></super> <block>{

   <decl_stmt><decl><specifier>protected</specifier> <type><name>String</name></type> <name>title</name> <init>= <expr><literal type="string">"Java Console I/O"</literal></expr></init></decl>;</decl_stmt>  <comment type="line">// (Used for compatibility with previous versions of Console Applet)</comment>

   <function><specifier>protected</specifier> <type><name>String</name></type> <name>getTitle</name><parameter_list>()</parameter_list> <block>{
       <comment type="line">// Return a label to appears over the console;</comment>
       <comment type="line">// If you want to change the label, override this</comment>
       <comment type="line">// method to return a different string.</comment>
      <return>return <expr><name>title</name></expr>;</return>
   }</block></function>

   <decl_stmt><decl><specifier>protected</specifier>  <type><name>ConsolePanel</name></type> <name>console</name></decl>;</decl_stmt>  <comment type="line">// console for use in program()</comment>

   <function><specifier>protected</specifier> <type><name>void</name></type> <name>program</name><parameter_list>()</parameter_list> <block>{
          <comment type="line">// The console-type program; override this in your sub-class</comment>
          <comment type="line">// to be the program that you want your applet to run.</comment>
          <comment type="line">// Use the variable "console", which is already defined,</comment>
          <comment type="line">// to do inuput/output in your program.</comment>
      <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>putln</name></name><argument_list>(<argument><expr><literal type="string">"Hello World!"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
   }</block></function>


   <comment type="line">// The remainder of this file consists of implementation details that</comment>
   <comment type="line">// you don't have to understand in order to write your own console applets.</comment>

   <decl_stmt><decl><specifier>private</specifier> <type><name>Button</name></type> <name>runButton</name></decl>;</decl_stmt>  <comment type="line">// user presses this to run the program</comment>

   <decl_stmt><decl><specifier>private</specifier> <type><name>Thread</name></type> <name>programThread</name> <init>= <expr><literal type="null">null</literal></expr></init></decl>;</decl_stmt>     <comment type="line">// thread for running the program; the run()</comment>
                                            <comment type="line">//    method calls program()</comment>
   <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>programRunning</name> <init>= <expr><literal type="boolean">false</literal></expr></init></decl>;</decl_stmt>
   <decl_stmt><decl><specifier>private</specifier> <type><name>boolean</name></type> <name>firstTime</name> <init>= <expr><literal type="boolean">true</literal></expr></init></decl>;</decl_stmt>  <comment type="line">//    set to false the first time program is run</comment>

   <function><specifier>public</specifier> <type><name>void</name></type> <name>run</name><parameter_list>()</parameter_list> <block>{   <comment type="line">// just run the program()</comment>
      <expr_stmt><expr><name>programRunning</name> <operator>=</operator> <literal type="boolean">true</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>program</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>programRunning</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>stopProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }</block></function>

   <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>startProgram</name><parameter_list>()</parameter_list> <block>{
      <expr_stmt><expr><call><name><name>runButton</name><operator>.</operator><name>setLabel</name></name><argument_list>(<argument><expr><literal type="string">"Abort Program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <if>if <condition>(<expr><operator>!</operator><name>firstTime</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clear</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <try>try <block>{ <expr_stmt><expr><call><name><name>Thread</name><operator>.</operator><name>sleep</name></name><argument_list>(<argument><expr><literal type="number">300</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block>  <comment type="line">// some delay before restarting the program</comment>
         <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ }</block></catch></try>
      }</block></then></if>
      <expr_stmt><expr><name>firstTime</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>programThread</name> <operator>=</operator> <operator>new</operator> <call><name>Thread</name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>programThread</name><operator>.</operator><name>start</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }</block></function>

   <function><specifier>synchronized</specifier> <specifier>private</specifier> <type><name>void</name></type> <name>stopProgram</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>programRunning</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name><name>programThread</name><operator>.</operator><name>stop</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <try>try <block>{ <expr_stmt><expr><call><name><name>programThread</name><operator>.</operator><name>join</name></name><argument_list>(<argument><expr><literal type="number">1000</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt> }</block>
         <catch>catch <parameter_list>(<parameter><decl><type><name>InterruptedException</name></type> <name>e</name></decl></parameter>)</parameter_list> <block>{ }</block></catch></try>
      }</block></then></if>
      <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>clearBuffers</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>programThread</name> <operator>=</operator> <literal type="null">null</literal></expr>;</expr_stmt>
      <expr_stmt><expr><name>programRunning</name> <operator>=</operator> <literal type="boolean">false</literal></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>runButton</name><operator>.</operator><name>setLabel</name></name><argument_list>(<argument><expr><literal type="string">"Run Again"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>runButton</name><operator>.</operator><name>requestFocus</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
   }</block></function>

   <function><specifier>public</specifier> <type><name>void</name></type> <name>init</name><parameter_list>()</parameter_list> <block>{

      <expr_stmt><expr><call><name>setBackground</name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>black</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><call><name>setLayout</name><argument_list>(<argument><expr><operator>new</operator> <call><name>BorderLayout</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>console</name> <operator>=</operator> <operator>new</operator> <call><name>ConsolePanel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"Center"</literal></expr></argument>,<argument><expr><name>console</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <decl_stmt><decl><type><name>Panel</name></type> <name>temp</name> <init>= <expr><operator>new</operator> <call><name>Panel</name><argument_list>()</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <decl_stmt><decl><type><name>Label</name></type> <name>lab</name> <init>= <expr><operator>new</operator> <call><name>Label</name><argument_list>(<argument><expr><call><name>getTitle</name><argument_list>()</argument_list></call></expr></argument>)</argument_list></call></expr></init></decl>;</decl_stmt>
      <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>lab</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>lab</name><operator>.</operator><name>setForeground</name></name><argument_list>(<argument><expr><operator>new</operator> <call><name>Color</name><argument_list>(<argument><expr><literal type="number">180</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>,<argument><expr><literal type="number">0</literal></expr></argument>)</argument_list></call></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"North"</literal></expr></argument>, <argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

      <expr_stmt><expr><name>runButton</name> <operator>=</operator> <operator>new</operator> <call><name>Button</name><argument_list>(<argument><expr><literal type="string">"Run the Program"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><name>temp</name> <operator>=</operator> <operator>new</operator> <call><name>Panel</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>setBackground</name></name><argument_list>(<argument><expr><name><name>Color</name><operator>.</operator><name>white</name></name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>temp</name><operator>.</operator><name>add</name></name><argument_list>(<argument><expr><name>runButton</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name><name>runButton</name><operator>.</operator><name>addActionListener</name></name><argument_list>(<argument><expr><name>this</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      <expr_stmt><expr><call><name>add</name><argument_list>(<argument><expr><literal type="string">"South"</literal></expr></argument>,<argument><expr><name>temp</name></expr></argument>)</argument_list></call></expr>;</expr_stmt>

   }</block></function>

   <function><specifier>public</specifier> <type><name>Insets</name></type> <name>getInsets</name><parameter_list>()</parameter_list> <block>{
      <return>return <expr><operator>new</operator> <call><name>Insets</name><argument_list>(<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>,<argument><expr><literal type="number">2</literal></expr></argument>)</argument_list></call></expr>;</return>
   }</block></function>

   <function><specifier>public</specifier> <type><name>void</name></type> <name>stop</name><parameter_list>()</parameter_list> <block>{
      <if>if <condition>(<expr><name>programRunning</name></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>stopProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>putln</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>putln</name></name><argument_list>(<argument><expr><literal type="string">"*** PROGRAM HALTED"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then></if>
   }</block></function>

   <function><specifier>synchronized</specifier> <specifier>public</specifier> <type><name>void</name></type> <name>actionPerformed</name><parameter_list>(<parameter><decl><type><name>ActionEvent</name></type> <name>evt</name></decl></parameter>)</parameter_list> <block>{
            <comment type="line">// Only possible action is a click on the button.</comment>
            <comment type="line">// If program is running, stop it; otherwise, run it.</comment>
      <if>if <condition>(<expr><name>programThread</name> <operator>!=</operator> <literal type="null">null</literal></expr>)</condition><then> <block>{
         <expr_stmt><expr><call><name>stopProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>putln</name></name><argument_list>()</argument_list></call></expr>;</expr_stmt>
         <expr_stmt><expr><call><name><name>console</name><operator>.</operator><name>putln</name></name><argument_list>(<argument><expr><literal type="string">"*** PROGRAM ABORTED BY USER"</literal></expr></argument>)</argument_list></call></expr>;</expr_stmt>
      }</block></then>
      <else>else
         <block type="pseudo"><expr_stmt><expr><call><name>startProgram</name><argument_list>()</argument_list></call></expr>;</expr_stmt></block></else></if>
   }</block></function>

}</block></class>
</unit>
